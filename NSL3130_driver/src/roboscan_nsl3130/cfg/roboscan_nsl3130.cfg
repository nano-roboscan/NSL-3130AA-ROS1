#!/usr/bin/env python
# -*- coding: utf-8 -*-

PACKAGE = "roboscan_nsl3130"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Basic Settings 
gen.add("ip_addr", str_t, 0, "0. IP Address", "192.168.0.220")
#gen.add("net_mask", str_t, 0, "1. Net Mask", "255.255.255.0" )
#gen.add("gw_addr", str_t, 0, "2. GW Addr", "192.168.0.1") 
gen.add("cv_show", bool_t, 0, "A. Show OpenCV window", False)
# Frame ID
gen.add("frame_id", str_t, 0, "Q. Frame ID", "roboscan_frame")


# Lens Type (NF=0, SF=1, WF=2) -> default value : SF(1)
gen.add("lens_type", int_t, 0, "B. Lens Type", 1,
        edit_method=dict(enum=[
            {"name": "NF", "value": 0, "description": "Narrow FOV Lens"},
            {"name": "SF", "value": 1, "description": "Standard FOV Lens (default)"},
            {"name": "WF", "value": 2, "description": "Wide FOV Lens"}
        ]))
# Image Type (default : 3 DISTANCE_AMPLITUDE)
gen.add("image_type", int_t, 0, "C. Image Type", 3,
        edit_method=dict(enum=[
            {"name": "DISTANCE",                "value": 1, "description": "Distance only"},
            {"name": "GRAYSCALE",               "value": 2, "description": "Grayscale only"},
            {"name": "DISTANCE_AMPLITUDE",      "value": 3, "description": "Distance + Amplitude (default)"},
            {"name": "DISTANCE_GRAYSCALE",      "value": 4, "description": "Distance + Grayscale"},
            {"name": "RGB",                     "value": 5, "description": "RGB image"},
            {"name": "RGB_DISTANCE",            "value": 6, "description": "RGB + Distance"},
            {"name": "RGB_DISTANCE_AMPLITUDE",  "value": 7, "description": "RGB + Distance + Amplitude"},
            {"name": "RGB_DISTANCE_GRAYSCALE",  "value": 8, "description": "RGB + Distance + Grayscale"}
        ]))

gen.add("hdr_mode", int_t, 0, "D. HDR Mode", 0,
        edit_method=dict(enum=[
            {"name": "HDR_OFF",      "value": 0, "description": "HDR disabled (default)"},
            {"name": "HDR_SPATIAL",  "value": 1, "description": "Spatial HDR"},
            {"name": "HDR_TEMPORAL", "value": 2, "description": "Temporal HDR"}
        ]))

gen.add("int_0",  int_t, 0, "E. Integration Time 3D",       1000, 0, 2000)
gen.add("int_1",  int_t, 0, "F. Integration Time 3D HDR 1", 500, 0, 2000)
gen.add("int_2",  int_t, 0, "G. Integration Time 3D HDR 2", 100, 0, 2000)
gen.add("int_gr", int_t, 0, "H. Integration Time Grayscale", 100, 0, 40000)
gen.add("min_amplitude", int_t, 0, "I. Minimum Amplitude", 100, 0, 1000)

gen.add("mod_index", int_t, 0, "J. Modulation Frequency", 0,
        edit_method=dict(enum=[
            {"name": "12MHz", "value": 0, "description": "12 MHz (default)"},
            {"name": "24MHz", "value": 1, "description": "24 MHz"},
            {"name": "6MHz",  "value": 2, "description": "6 MHz"},
            {"name": "3MHz",  "value": 3, "description": "3 MHz"}
        ]))
gen.add("channel", int_t, 0, "K. Modulation Channel", 0, 0, 15)

gen.add("roi_left_x",                int_t,    0, "L. ROI Left X", 0, 0, 120)
gen.add("roi_top_y",                 int_t,    0, "M. ROI Top Y", 0, 0, 116)
gen.add("roi_right_x",               int_t,    0, "N. ROI Right X", 319, 127, 319)


gen.add("transform_angle", double_t, 0, "P. Transform Angle", 0.0, -90.0, 90.0)
gen.add("median_filter",   bool_t, 0, "R. Median Filter", False)
gen.add("gaussian_filter", bool_t, 0, "S. Gaussian Filter", False)
gen.add("temporal_filter_factor",    double_t, 0, "T. Temporal Filter Factor", 0.0, 0.0, 1.0) #0.0~1.0, 내부적으로 0~1000 scaling
gen.add("temporal_filter_threshold", int_t,    0, "T. Temporal Filter Threshold", 0, 0, 1000)
gen.add("edge_filter_threshold",     int_t,    0, "U. Edge Filter Threshold", 0, 0, 5000)

gen.add("interference_detection_limit", int_t, 0, "V. Interference Detection Limit", 0, 0, 10000)
gen.add("use_last_value", bool_t, 0, "V. Use Last Value for Interference", False)

gen.add("dual_beam", int_t, 0, "W. Dual Beam Mode", 0,
        edit_method=dict(enum=[
            {"name": "OFF",  "value": 0, "description": "Dual beam disabled (default)"},
            {"name": "6MHz", "value": 1, "description": "Dual beam 6MHz"},
            {"name": "3MHz", "value": 2, "description": "Dual beam 3MHz"}
        ]))

gen.add("dual_beam_option", int_t, 0, "W. Dual Beam Option", 0,
        edit_method=dict(enum=[
            {"name": "Avoidance",      "value": 0, "description": "Avoidance (default)"},
            {"name": "Correction",     "value": 1, "description": "Correction"},
            {"name": "FullCorrection", "value": 2, "description": "Full correction"}
        ]))

gen.add("grayscale_led", bool_t, 0, "X. Grayscale LED", False)
gen.add("pointcloud_edge", int_t, 0, "Y. PointCloud Edge Threshold", 200, 0, 10000)
gen.add("max_distance", int_t, 0, "Z. Max Distance (mm)", 12500, 0, 50000)

exit(gen.generate(PACKAGE, "roboscan_nsl3130_node", "RoboscanNSL3130"))
